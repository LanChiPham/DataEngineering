2. String: https://www.techinterviewhandbook.org/algorithms/string/

A String is a sequence of characters. Many tips that apply to arrays also apply to strings.

Common data structures for looking up strings:
    - Trie/Prefix Tree https://en.wikipedia.org/wiki/Trie
    - Suffix Tree https://en.wikipedia.org/wiki/Suffix_tree

Common string algorithms:
    - Rabin Karp for efficient searching of substring using a rolling hash:
    https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm
    - KMP for efficient searching of substring
    https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm

Time complexity:
    - Access: O(1)
    - Search: O(n)
    - Insert: O(n)
    - Remove: O(n)

Operations involving another string: We assume the other string is of length m 
    - Find substring: O(n.m) 
    -> This is the most naive case. There are more efficient algorithms for string searching such as the KMP algorithms
    - Concatenating strings: O(n+m)
    - Slice: O(m)
    - Split(by token): O(n+m)
    - Strip(by token): O(n+m)
    - Strip(remove leading and trailing  whitespaces): O(n)
 
Things to look out for during interviews: Ask about input character set and case sensitivity. usually the characters are limited to lowercase latin characters, for example a to z.

Corner cases:
    - Empty string
    - String with 1 or 2 characters
    - String with repeated characters
    - String with only distinct characters

Techniques:
    - Counting characters: The most common way of doing is by using a hash table/map in your language of choice. The space complexity: O(n). 
    This is because the upper bound is the range of characters, which is usually a fixed constant of 26. 

    - String of unique characters: a neat trick to count the characters in a string of unique characters is to use a 26-bit bitmask to indicate which lower case latin characters are inside the string

    mask = 0
    for c in word:
        mask |= (1 << (ord(c) - ord('a)))

        To determine if two strings have common characters , perform & on the two bitmasks.

    - Anagram: 
        An anagram is word switch or word play. It is the result of rearranging the ltters of word or phrase to produce a new word or phrase, while 
        using all the original letters only once.
        To determine if two strings are anagrams, there are a few approaches:
            - Sort both strings should produce the same resulting string.
            Time and space complexity: O(nlog(n)) & O(log(n))
            - If we map each character to a prime number and we multiply each mapped number together, anagrams should have the same multiple (prime factor decomposition).
            Time and space complexity: O(n) & O(1) 
            - Frequency counting of characters will help to determine if 2 strings are anagrams.
            Time and space complexity: O(n) & O(1)


    - Palindrome: 
        A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, such as madam or racecar.
        Ways to determine if a string is a palindrome:
            - Reverse the string and it should be equal to itself
            - Have two pointers at the start and end of the string. Move the pointers inward till they meet. at every point in time, the characters are at both pointers should match.

        Because the order of characters within the string matters, so hash tables are not helpful.

        When the question is about counting the number of palindromes, a common trick is to leave 2 pointers that move outward, away from the middle. 
        The palindromes can be even or odd length.
        For each middle pivot position, you need to check it twice - once that includes the character and once without the character.
            - For substrings, you can terminate early once if there is no match.
            - For subsequences, use dynamic programming as there are overlapping subproblems.
            